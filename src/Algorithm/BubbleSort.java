package Algorithm;

import java.util.Arrays;

public class BubbleSort {
	/*Bubble Sort
	 * 서로 인접한 두 원소의 대소를 비교하고, 조건에 맞지 않다면 자리를 교환하며 정렬하는 알고리즘
	 * 
	 * 1회전에서 첫 번째 원소와 두 번째 원소를, 두 번째 우너소와 세 번째 원소를, 세번째 원소와 네 번째 원소를, ... 
	 * 이런 식으로(마지막-1)번쨰 원소와 마지막 원소를 비교하여 조건에 맞지 않는다면 서로 교환한다.
	 * 
	 * 1.회전을 수행하고 나면 가자 큰 원소가 맨 뒤로 이동하므로 2회전에서는 맨 끝에 있는 원소는 정렬에서 제외되고,
	 * 2회전을 수행하고 나면 끝에서 두 번째 원소까지는 정렬에서 제외된다. 이렇게
	 * 정렬을 1회전 수행할 때마다 정렬에서 제외되는 데이터가 하니씩 늘어난다. 
	 * 
	 * 장점
	 * 구현이 매우 간단하고, 소스코드가 직관적이다.
	 * 정렬하고자 하는 배열 안에서 교환하는 방식이므로, 다른 메모리 공간을 필요로 하지 않다.
	 * 제자리 정렬
	 * 안정 정렬이다.
	 * 
	 * 단점
	 * 시간복잡도가 최악, 최선, 평균 모두 O(n^2)으로, 굉장히 비효율적이다.
	 * 정렬 돼있지 않은 원소가 정렬됐을때의 자리로 가기 위해서, 교환 연산이 많이 일어나게 된다.
	 * */
	public static void main(String[] args) {
		int temp = 0;
		int[] arr = new int[] {34,6,16,28,45,43,49,36,38,41,19};
		for (int i = 0; i < arr.length; i++) {
			for (int j = 1; j < arr.length-i; j++) {
				if(arr[j-1] > arr[j]) {
					temp = arr[j-1];
					arr[j-1] = arr[j];
					arr[j] = temp;
				}
			}
		}
		System.out.println(Arrays.toString(arr));
	}
}
